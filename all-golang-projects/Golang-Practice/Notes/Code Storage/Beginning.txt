
import "fmt" // imports fmt package from standard lib
/*
you can also do this:

import(
	"fmt"
	"math/rand"
)

this imports the packages with import paths "fmt" and "math/rand".
by convention, the package name is the same as the last element of the import path.
for instance, the "math/rand" package comprises files that begin with the statement package rand

continuing the previous program:



package main

import (
	"fmt"
	"math"
)

func main() {
	fmt.Println(math.Pi)
}

in Go, a name is exported if it begins with a capital letter. for example, Pizza is an exported name, as is Pi, which is exported from the math package.
pizza and pi do not start with a capital letter, so they are not exported.
when importing a package, you can refer only to its exported names. Any "unexported" names are not accessible from outside the package.
the program will only run if you write math.Pi instead of math.pi
*/

There are two print funcs, `println` and `printf`

Outputting a var with println: print(variable)
Outputting a var with printf: print("%v", var) or printf("%d", var)

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

package main

func main() { // entry point
	fmt.Println("Hello there.")

	// basic variable types:
	// bool, string
	// int, int8, int16, int32, int64
	// uint, uint8, uint16, uint32, uint64, uintptr (unsigned ints)
	// byte (same as/alias for uint8)
	// rune (alias for int32) (represents a unicode code point)
	// float32, float64
	// complex64, complex128 (imaginary numbers)
	// ---------------------------------------------------------------
	// in case you're hyper optimizing code stick to
	// int
	// float64
	// complex128

	// initializing variable
	// var number int
	// var floatNumber float64
	// var boolean bool
	// var name string

	// short assignment operator := (inferred variables)
	// inferred vars are still static type
	// you do not need to specify type

	// newVariable := 86 // go automatically gives this an int type
	// decimal := 87.234 // float
	// word := "golang" // string
	// trueorfalse := true // bool

	// example:

	// congrats := "Congratulations!"   vs    var congrats string = "Congratulations!"
	// fmt.Println(congrats)			  	  fmt.Println(congrats)

	// you can also do this:
	// var i int
	// j := i (j is now an integer)

	// and you can declare vars on the same line
	// forplux, zenuba := 80276, "Apple"

	// further example:
	// average open rate is .23 and display message is "is the average open rate of your messages"
	averageOpenRate, displayMessage := .23, "is the average open rate of your messages"
	fmt.Println(averageOpenRate, displayMessage) // when printing variables there's an automatic space between the text and the variable which most languages dont have, neato!

	// you can convert a variable to different types, e.g
	temperatureInt := 89
	temperatureFloat := float64(temperatureInt) // 89.0
	fmt.Println(temperatureInt)
	fmt.Printf("%f\n", temperatureFloat) // when using printf its important to use the right variable caller, i originally used %v instead of %f and the value truncated from 89.0 to 89

	// you can purposefully truncate:
	// our textio customers want to know how long they've had accounts with us
	// create a variable called accountAgeInt that will be the truncated integer version of accountAge

	accountAge := 2.6
	accountAgeInt := int(accountAge) // has the effect of truncating account age

	fmt.Println("Your Textio account has existed for", accountAgeInt, "years")

	// consts
	// constants do not support inferred types, so you cannot use :=
	// you are not allowed to mutate constants
	// e.g
	//----------------------------------------
	// const premiumPlanName = "Premium Plan"
	// premiumPlanName = "Basic Plan"
	//----------------------------------------
	// this would throw an error

}
