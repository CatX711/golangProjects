Interfaces are as close as you can get to inheritance in go.
They're like blueprints for functions. Here's an example that
provides basic structure for different types of bank accounts,
Chase, Bank of England, Bitcoin, etc. 
They all share common features and this is how you define them:



type BankAccount interface{
    GetBalance() int // 100 = Â£1
    Deposit(amount int)
    Widthdraw(amount int) error // might throw error if widthdraw amount too high
}


type BankOfEngland struct{
    balance int
}

// constructor
func NewBankOfEngland() *BankOfEngland {
    return &WellsFargo{
        balance: 0
    }
}

func (w *BankOfEngland) GetBalance() int{

}

